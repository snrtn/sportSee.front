Composants de Classe
Dans les composants de classe, le cycle de vie peut être utilisé pour déclencher des appels de données asynchrones. Voici les méthodes de cycle de vie clés pour gérer les données asynchrones :

constructor(props) : Initialisation de l'état et des bindings de méthodes. Pas pour les appels de données.
componentDidMount() : Cet endroit est idéal pour les appels de données asynchrones. React a inséré le composant dans le DOM, et vous pouvez maintenant charger les données.
componentDidUpdate(prevProps, prevState, snapshot) : Utilisé pour réagir à des changements spécifiques dans les props ou l'état, permettant des mises à jour de données conditionnelles.
componentWillUnmount() : Nettoyage avant que le composant ne soit retiré du DOM, comme annuler des requêtes en cours ou des abonnements.

constructor(props) {
    super(props);
    // 상태 초기화
    this.state = {
      data: null,
      isLoading: true,
    };
  }

  componentDidMount() {
    // 컴포넌트가 마운트된 후, 데이터를 비동기적으로 불러옵니다.
    this.fetchData();
  }

  componentDidUpdate(prevProps, prevState) {
    // props나 state가 변경되었을 때, 특정 조건에 따라 추가적인 데이터를 불러옵니다.
    if (prevProps.source !== this.props.source) {
      this.fetchData();
    }
  }

  componentWillUnmount() {
    // 컴포넌트가 언마운트되기 전에, 진행 중인 데이터 요청을 취소하거나 구독을 해제하는 등의 정리 작업을 수행합니다.
    // 예: 데이터 요청 취소 로직
  }


Composants Fonctionnels avec Hooks
Avec l'introduction des hooks, React offre une approche plus simple et plus élégante pour gérer les opérations asynchrones dans les composants fonctionnels :

useState :
Pour initialiser et mettre à jour l'état local du composant.

useEffect :
Ce hook remplace les méthodes de cycle de vie mentionnées ci-dessus dans les composants fonctionnels. Vous pouvez l'utiliser pour effectuer des opérations de side-effect, y compris la récupération de données asynchrones.

Exécutez au montage et à chaque mise à jour en passant un tableau de dépendances vide [] pour simuler componentDidMount.
Pour simuler componentDidUpdate, incluez des variables d'état ou des props dans le tableau de dépendances.
Pour simuler componentWillUnmount, retournez une fonction de nettoyage.

useEffect prend deux arguments : une fonction qui exécute l'effet secondaire, et un tableau de dépendances. Le tableau de dépendances est optionnel.

useEffect(() => {
  // Logique de l'effet secondaire
}, [dependencies]);

Comment cela fonctionne

01. Exécution après le rendu : La fonction d'effet secondaire à l'intérieur de useEffect est exécutée après que le rendu du composant est terminé. Comme elle s'exécute de manière asynchrone après que le navigateur a mis à jour le DOM, elle n'affecte pas directement le rendu.

02. Tableau de dépendances : En passant un tableau de dépendances comme second argument à useEffect, vous pouvez contrôler l'exécution de la fonction d'effet secondaire en fonction des changements de valeur de ces dépendances. Si un tableau vide ([]) est passé, l'effet ne s'exécutera qu'une seule fois, juste après le montage du composant.

03. Fonction de nettoyage(Cleanup) : La fonction d'effet secondaire à l'intérieur de useEffect peut retourner une fonction de nettoyage. Cette fonction de nettoyage est appelée juste avant que le composant soit démonté ou avant que l'effet soit à nouveau exécuté. Elle permet d'effectuer des opérations de nettoyage pour éviter les fuites de mémoire, annuler des abonnements, ou nettoyer des minuteries.

useEffect(() => {
  const timer = setTimeout(() => {
    // Logique du minuteur
  }, 1000);

  return () => {
    clearTimeout(timer); // Nettoie le minuteur avant que le composant soit démonté ou mis à jour.
  };
}, []);

useEffect permet d'effectuer divers effets secondaires à chaque rendu du composant, et de réagir spécifiquement aux changements de certaines valeurs si nécessaire. Cela offre une manière d'implémenter des patterns similaires aux méthodes de cycle de vie dans les composants fonctionnels.